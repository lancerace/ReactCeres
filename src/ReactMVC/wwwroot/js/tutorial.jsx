var Comment = React.createClass({
    rawMarkup: function () {
        var md = new Remarkable();
        var rawMarkup = md.render(this.props.children.toString());
        return { __html: rawMarkup };
    },
    remove: function (){
        console.log("removing index: " + this.props.index);
    },
    render: function () {
        return (
          <div className="comment">
            <h2 className="plantName">
                {this.props.name}
            </h2>
        <span dangerouslySetInnerHTML={this.rawMarkup()} />
              <button onClick={this.remove}>Remove</button>             
          </div>
      );
    }
});
var CommentBox = React.createClass({
    loadCommentsFromServer: function () {
        var xhr = new XMLHttpRequest();
        xhr.open('get', this.props.url, true);
        xhr.onload = function () {
            var data = JSON.parse(xhr.responseText);
            this.setState({ data: data });
        }.bind(this);
        xhr.send();
    },
    handleCommentSubmit: function (comment) {
        var comments = this.state.data;
        // Optimistically set an id on the new comment. It will be replaced by an
        // id generated by the server. In a production application you would likely
        // not use Date.now() for this and would have a more robust system in place.
        comment.id = Date.now();
        var newPlants = comments.concat([comment]);
        this.setState({ data: newPlants });

        // TODO: submit to the server and refresh the list
        var data = new FormData();
        data.append('name', comment.name);
        data.append('qty', comment.qty);

        var xhr = new XMLHttpRequest();
        xhr.open('post', this.props.submitUrl, true);
        xhr.onload = function () {
            this.loadCommentsFromServer();
        }.bind(this);
        xhr.send(data);
    },
    removeComment: function (i) {
        this.props.remove(i); 
    },
    getInitialState: function () {
        return { data: [] };
    },
    componentDidMount: function () {
        this.loadCommentsFromServer();
        window.setInterval(this.loadCommentsFromServer, this.props.pollInterval);
    },
    render: function () {
        return (
          <div className="commentBox">
            <h1>Comments</h1>
            <CommentList data={this.state.data[0]}/>
            <CommentForm onCommentSubmit={this.handleCommentSubmit}/>
          </div>
      );
    }
});
var CommentList = React.createClass({
    render: function () {
        var commentNodes = this.props.data.map(function (comment) {
            return (
              <Comment name={comment.name} key={comment._id} index={comment._id}>
                  {comment.qty}                                 
              </Comment>
              
      );
        });
        return (
      <div className="commentList">
          {commentNodes}
      </div>
    );

    }
});

var CommentForm = React.createClass({
    getInitialState: function () {
        return { name: '', qty: '' };
    },
    handleAuthorChange: function (e) {
        this.setState({ name: e.target.value });
    },
    handleTextChange: function (e) {
        this.setState({ qty: e.target.value });
    },
    handleSubmit: function (e) {
        e.preventDefault();
        var name = this.state.name.trim();
        var qty = this.state.qty.trim();
        if (!name || !qty) {
            return;
        }
        this.props.onCommentSubmit({ name: name, qty: qty }); 
        this.setState({ name: '', qty: '' });
    },
    render: function () {
        return (
      <form className="commentForm" onSubmit={this.handleSubmit}>
       <input type="text"
              placeholder="Your name"
              value={this.state.name}
              onChange={this.handleAuthorChange} />
        <input type="text"
               placeholder="Say something..."
               value={this.state.qty}
               onChange={this.handleTextChange} />
        <input type="submit" value="Post"/>
      </form>
      );
    }
});

ReactDOM.render(
  <CommentBox url="/plants" submitUrl="/plants/new" pollInterval={2000} />,
  document.getElementById('content')
);